#!/bin/bash

# Automatically set preferred gsettings keys as outlined in the 'gsettings.list' file
# 'gsettings' can be obtained by executing "dconf watch /" and then manually changing settings
function gsettings_config {
	echo_message info "Setting preferred application-specific & desktop settings..."
	# Variables
	LIST=$(dirname "$0")'/data/gsettings.list'
	while IFS= read line
	do
		gsettings set $line
	done < "$LIST"
	# Finished
	echo_message success "Settings changed successfully."
	whiptail --title "Finished" --msgbox "Settings changed successfully." 8 56
	system_configure
}


# Disable apport crash dialogs
function disable_crash_dialogs {
	# Check if apport is aleady disabled.
	if [[ $(cat '/etc/default/apport' | grep -q 'enabled=0'; echo $?) != 0 ]]; then
		echo_message info "Disabling Apport crash dialogs..."
		superuser_do "sed --in-place s/enabled=1/enabled=0/g /etc/default/apport"
		# Finished
		echo_message info "Apport crash dialogs disabled."
		whiptail --title "Finished" --msgbox "Apport crash dialogs disabled successfully." 8 56
		system_configure
	else
		# Already configured
		echo_message info "Apport crash dialogs are aleady disabled."
		whiptail --title "Finished" --msgbox "Apport crash dialogs are aleady disabled." 8 56
		system_configure
	fi
}

# Hide snap directory in home folder
function hide_snap_folder {
	# Check if snap folder is aleady hidden.
	if [[ $(cat ~/.hidden | grep -q 'snap'; echo $?) != 0 ]]; then
		echo_message info "Hiding 'snap' folder in user home..."
		echo snap >> ~/.hidden
		# Finished
		echo_message info "Successfully hidden 'snap' folder in user home."
		whiptail --title "Finished" --msgbox "Successfully hidden 'snap' folder in user home" 8 56
		system_configure
	else
		# Already configured
		echo_message info "The 'snap' folder in user home is already hidden."
		whiptail --title "Finished" --msgbox "The 'snap' folder in user home is already hidden." 8 56
		system_configure
	fi
}

# Configure the remote home directories on the central NAS
function install_nas_packages {
    # Installing needed apps for this action
    INSTALL_NAS_PACKAGE='ok'
    install_from_list "packages for remote homes & central authentication" "cosmonas" "system_configure"
}

function setup_nas_homes {
    if [[ ${INSTALL_NAS_PACKAGE} == 'ok' && ${NAS_CONFIGURATION} != 'ok' ]]; then
        
        # The actual setup
        echo_message info 'Setting up LDAP auth files...'
        echo_message warning 'Requires root privileges'
        
        # File '/etc/ntp.conf'
        echo_message info 'File "ntp.conf"'
        echo "server 128.178.23.1" | superuser_do 'tee -a /etc/ntp.conf'
        
        # File '/etc/ldap.conf'
        echo_message info 'Configuring file "ldap.conf"'
        echo -e "timelimit 30\nbind_timelimit 30\nidle_timelimit 1200\nbind_policy soft\nnss_initgroups backlink\nnss_map_attribute uniqueMember memberUid\n" | superuser_do tee -a /etc/ldap.conf
        IGNORE=$(awk -F: '{printf ("%s,",$1)}' /etc/passwd)
        echo "nss_initgroups_ignoreusers ${IGNORE%,}" | superuser_do 'tee -a /etc/ldap.conf'
        
        # File '/etc/nsswitch.conf'
        echo_message info 'File "nsswitch.conf"'
        # The following is: (1) unnecessary, (2) possibily wrong
        #superuser_do 'sed -i "s/compat/files ldap/" /etc/nsswitch.conf'
        echo -e "automount: files\n" | superuser_do 'tee -a /etc/nsswitch.conf'
        
        # File '/etc/idmapd.conf'
        echo_message info 'File "idmapd.conf"'
        echo -e "Domain = INTRANET\nLocal-Realms = epfl@INTRANET,epfl,epfl.ch\n" | superuser_do 'tee -a /etc/idmapd.conf'
        
        # File '/etc/nslcd.conf'
        echo_message info 'Configure nscd daemon'
        echo -e "bind_timelimit 30\ntimelimit 30\nidle_timelimit 1200" | superuser_do 'tee -a /etc/nslcd.conf'
        if [[ "$LATEST_LTS" == 'yes' ]]; then
            superuser_do 'systemctl nslcd.service restart'
        else
            superuser_do 'service nscd restart'
        fi
        
        # Enabling login from other users
        if [[ "$LATEST_LTS" == 'no' ]]; then
            echo_message info 'Enabling login from other users'
            echo -e "[SeatDefaults]\ngreeter-show-manual-login=true\ngreeter-hide-users=true" | superuser_do 'tee /etc/lightdm/lightdm.conf'
        fi
        
        # Done with LDAP
        echo_message success 'Done with LDAP.'
        
        # Setup autofs
        echo_message info 'Setting up automount & autofs ...'
        echo -e "# Include map file for COSMO services\n" | superuser_do 'tee -a /etc/auto.master'
        echo -e "/net /etc/auto.cosmo --timeout 30\n" | superuser_do 'tee -a /etc/auto.master'
        
        # There is an error if the rule '+auto.master' is present. NOT SURE IF STILL NEEDED.
        #echo_message warning "Commenting out '+auto.master' otherwise it will cause problems"
        #superuser_do 'sed -i -e "s:^\(+auto\.master\):#\1:g" /etc/auto.master'
        
        # Creating map files
        echo_message info 'Creating map files for COSMO workspaces'
        echo 'opts="-fstype=nfs,soft,intr,rsize=8192,wsize=8192,nosuid,tcp"' | superuser_do 'tee /etc/auto.cosmo'
        echo -e 'work $opts sti2files.epfl.ch:/sti_cosmo_1_files_nfs/cosmo-homes' | superuser_do 'tee /etc/auto.cosmo'
        echo -e 'cosmosrv $opts cosmosrv1.epfl.ch:/home' | superuser_do 'tee /etc/auto.cosmo'
        echo_message success 'Done. Restarting AutoFS...'
        if [[ "$LATEST_LTS" == 'yes' ]]; then
            superuser_do 'systemctl restart autofs.service'
        else
            superuser_do 'service autofs restart'
        fi
        
        # Permissions on scratch and local home
        echo_message info 'Changing permissions to local scratch folder and home'
        if [[ "$CPUGEN" != "xeon" ]]; then
            if [[ ! -d "/local/scratch" ]]; then
                superuser_do 'mkdir -p /local/scratch'
                superuser_do 'chgrp -R cosmo /local/scratch'
                # 1777 octal means: rwx for everyone PLUS sticky bit
                superuser_do 'chmod -R 1777 /local/scratch'
            else
                superuser_do 'chgrp -R cosmo /local/scratch'
                # 1777 octal means: rwx for everyone PLUS sticky bit
                superuser_do 'chmod -R 1777 /local/scratch'
            fi
            # Local home directory
            if [[ ! -d "/local/home/local" ]]; then
                superuser_do 'mkdir -p /local/home/local'
                superuser_do 'chown -R local:local /local/home/local'
                superuser_do 'sed -i -e "s|^\(local.*:\)/home/local\(:.*\)|\1/local/home/local\2|" /etc/passwd'
            else
                superuser_do 'sed -i -e "s|^\(local.*:\)/home/local\(:.*\)|\1/local/home/local\2|" /etc/passwd'
            fi
            echo_message warning 'Remember to move /home/local/* to /local/home/local'
        else
            if [[ ! -d "/ssd" ]]; then
                superuser_do 'mkdir -p /ssd/scratch /ssd/home/local'
            fi
            superuser_do 'sed -i -e "s|^\(local.*:\)/home/local\(:.*\)|\1/ssd/home/local\2|" /etc/passwd'
            echo_message warning 'Remember to move /home/local/* to /ssd/home/local'
        fi
            echo_message warning 'Remember to change /home/local/ to /local/home/local in the /etc/passwd'
        echo_message success 'Configuration done.'
        NAS_CONFIGURATION='ok'
    else
        whiptail --title "ERROR" --msgbox "Possible causes:\n (1) Did you install necessary packages?\n (2) You cannot run this action twice!" 8 56
        system_configure
    fi
}


# Install & configure EPFL MyPrint's printers (printer's pools for color & BW)
function setup_epfl_myprint_dummy {
    # This does nothing. Fallback while implementing this stuff.
    whiptail --title "INFO" --msgbox "This function is going to be implemented soon!" 8 56
    system_configure
}

function setup_epfl_myprint {
    # Check to see if the drivers are installed
    if [[ ! -e /usr/share/cups/model/PPD*.ppd ]]
    then
        superuser_do mkdir -p /usr/share/cups/model
        superuser_do cp $(dirname "$0")'/data/epfl-printer-drivers'/*ppd /usr/share/cups/model/
    fi

    # Check to see if the printer is already installed
    if ! $(lpstat -p 2>&1 | grep -qE 'MyPrint*')
    then
        # Make sure the printer is available before trying to install it (check the printer web page)
        if [ `curl -s http://192.168.1.9/main/main.html | grep -c 'Brother HL-4570CDW' || true` = "0" ]
        then
            echo_message error "Printer cannot be found!"
            exit 1
        fi
        echo_message info "Installing MyPrint BW"
        lpadmin \
            -p 'Brother-HL-4570CDW' \
            -v 'socket://192.168.1.9' \
            -m 'HL-4570CDW series CUPS' \
            -P '/usr/share/ppd/brhl4570cdw.ppd' \
            -L 'Basement Utility Room' \
            -o 'Two-Sided Printing=DuplexNoTumble' \
            -o 'Color=Mono' \
            -o 'Enhance Black Printing=ON' \
            -o 'Skip Blank Page=ON' \
            -E
        ## Set it as the default printer
        #lpadmin -d 'Brother-HL-4570CDW'
        #echo "Setting up CUPS default print options"
        #sudo sed -ir 's/DefaultBRDuplex.*/DefaultBRDuplex: DuplexNoTumble/g;  
        #              s/DefaultBRMonoColor.*/DefaultBRMonoColor: mono/g;
        #              s/DefaultBREnhanceBlkPrt.*/DefaultBREnhanceBlkPrt: ON/g;
        #              s/DefaultBRSkipBlank.*/DefaultBRSkipBlank: ON/g;' /etc/cups/ppd/Brother-HL-4570CDW.ppd
    fi

}


# Configure System
function system_configure {
	NAME="System Configuration"
	echo_message title "Starting ${NAME,,}..."
	# Draw window
	CONFIGURE=$(eval `resize` && whiptail \
		--notags \
		--title "$NAME" \
		--menu "\nWhat would you like to do?" \
		--cancel-button "Go Back" \
		$LINES $COLUMNS $(( $LINES - 12 )) \
        'install_nas_packages'      '(1) Install required packages for remote homes & central authentication' \
        'setup_nas_homes'           '(2) Setup remote homes' \
        'setup_epfl_myprint_dummy'        'Install & configure EPFL MyPrint printers' \
		'disable_crash_dialogs'     'Disable error report dialogs (apport)' \
		'gsettings_config'          'Set preferred application & desktop settings' \
		'hide_snap_folder'          'Hide the snap folder in user home' \
		3>&1 1>&2 2>&3)
	# check exit status
	if [ $? = 0 ]; then
		echo_message header "Starting '$CONFIGURE' function"
		$CONFIGURE
	else
		# Cancelled
		echo_message info "$NAME cancelled."
		main
	fi
}
